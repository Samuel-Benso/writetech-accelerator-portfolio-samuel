---
slug: rank-docusaurus-openapi-plugin
title: How to Rank a Docusaurus Blog Post
authors: samuel-benson
tags: [seo, docusaurus, openapi, technical-writing, content-strategy]
description: A step by step SEO playbook for ranking Docusaurus blog posts, with hands on examples using the Docusaurus OpenAPI plugin.
keywords: [docusaurus openapi plugin, rank docusaurus blog, docusaurus seo, technical writing seo, api docs seo]
image: /img/seo-openapi-guide.png
---

When people say a post *ranks for a keyword*, they mean it shows on page one for a search query like docusaurus openapi plugin. Ranking is not luck. It is a set of repeatable steps. In this guide I will show you how to rank a Docusaurus blog post using the topic **How to use Docusaurus OpenAPI plugin** as the working example. Each step is practical and includes code or actions you can apply right away.

:::tip make sure the `image` above actually exists at `static/img/seo-openapi-guide.png` to avoid build errors.
:::

## 1. Pick a primary keyword and supporting keywords

Use free tools to find terms people search for.

- Google Keyword Planner  
- Ubersuggest  
- AnswerThePublic  

Example picks:
- Primary keyword: **docusaurus openapi plugin**
- Supporting keywords: generate api docs docusaurus, openapi docs in docusaurus, docusaurus api reference

Why this matters: one page should target one main idea. Supporting keywords give you subtopics and headings.

## 2. Match search intent by checking the top results

Search your keyword in an incognito window. Open the first five results. Note the patterns.

Look for:
- Content type: tutorial, docs, or reference  
- Depth: quick start vs deep guide  
- Extras: screenshots, code samples, repo links  

For **docusaurus openapi plugin**, intent is tutorial plus reference. So our post must teach setup and show real code, not just definitions.

## 3. Draft a clear outline before writing

A good outline makes your post scannable for humans and understandable for search engines.

Example outline for this topic:
1. What the plugin does  
2. Install and configure  
3. Add an OpenAPI file  
4. Generate docs  
5. Link it in sidebars and navbar  
6. Common errors and fixes  
7. SEO checks and publishing  
8. Conclusion

Turn each numbered item into an H2 section.

## 4. Create strong front matter

Front matter tells search engines what your page is about. Use your primary keyword in `title`, `slug`, `description`, and `keywords`.

Example front matter is already at the top of this file. Keep `slug` short and readable. Do not stuff keywords. One primary with a few related terms is enough.

## 5. Use your keyword in the right places

Use the primary keyword naturally in:
- H1 title  
- First 100 words  
- One or two H2 headings  
- Image alt text  
- File name if you include an image  

Do not over repeat. Aim for clarity and usefulness first.

## 6. Provide complete, working examples

Google rewards helpful content. Show the exact steps to use the plugin.

**Install the plugin and theme**

```bash
npm install docusaurus-plugin-openapi-docs docusaurus-theme-openapi-docs
# or
yarn add docusaurus-plugin-openapi-docs docusaurus-theme-openapi-docs
```

**Update `docusaurus.config.js` or `.ts`**

```js
// note: excerpt for clarity
presets: [
  [
    'classic',
    {
      docs: {
        sidebarPath: './sidebars.js',
        docItemComponent: '@theme/ApiItem', // required for OpenAPI theme
      },
      theme: { customCss: './src/css/custom.css' },
    },
  ],
],

plugins: [
  [
    'docusaurus-plugin-openapi-docs',
    {
      id: 'api',
      docsPluginId: 'classic',
      config: {
        petstore: {
          specPath: 'openapi/petstore.yaml',
          outputDir: 'docs/api/petstore',
          sidebarOptions: { groupPathsBy: 'tag' },
        },
      },
    },
  ],
],

themes: ['docusaurus-theme-openapi-docs']
```

**Place your OpenAPI file**

```
openapi/
  petstore.yaml
```

**Generate the docs**

```bash
npx docusaurus gen-api-docs api
```

This writes MDX files into `docs/api/petstore` plus a sidebar slice if configured.

**Expose the API in your navbar**

```js
themeConfig: {
  navbar: {
    items: [
      {
        type: 'docSidebar',
        sidebarId: 'api', // must match an id that exists in sidebars.js
        position: 'left',
        label: 'API',
      },
    ],
  },
}
```

**Create or extend the sidebar**

```js
// sidebars.js
module.exports = {
  api: [
    {
      type: 'autogenerated',
      dirName: 'api/petstore', // path relative to docs
    },
  ],
};
```

These examples make the tutorial trustworthy. Readers stay longer. That improves rank signals.

## 7. Add internal and external links

Internal links help Google understand your site structure.

Examples:

* From this post, link to your **sidebars** article
  `See: /blog/how-docusaurus-sidebars-work`
* From relevant docs pages, link back to this SEO guide

External links to trusted sources add credibility.

* OpenAPI spec: [https://swagger.io/specification](https://swagger.io/specification)
* Docusaurus docs: [https://docusaurus.io/docs](https://docusaurus.io/docs)

Use descriptive anchor text. Avoid “click here.”

## 8. Use images with descriptive alt text

Add at least one helpful screenshot such as the generated API sidebar.

Place the file at `static/img/seo-openapi-guide.png`.

Embed it:

```md
![Generated OpenAPI sidebar in Docusaurus](/img/seo-openapi-guide.png)
```

Keep image names readable. Set alt text that describes the image. This helps accessibility and image search.


## 10. Technical SEO for Docusaurus

These settings reduce indexing issues.

**Set site URL and base URL**

```js
// docusaurus.config.js
url: 'https://your-domain.com',
baseUrl: '/',
```

**Sitemap**

Docusaurus generates a sitemap automatically. After deploy, confirm it at:

```
https://your-domain.com/sitemap.xml
```

## Publish and submit to Google Search Console

Deploy your site, then visit **Google Search Console**:
[https://search.google.com/search-console/about](https://search.google.com/search-console/about)

* Add your property.
* Verify ownership.
* Submit your `sitemap.xml`.
* Use URL Inspection to request indexing for your new post.

This speeds up discovery and helps you measure performance.

## Track performance and improve

Search results move. Keep improving.

* In Search Console, open Performance.
* Look at Queries. You will see terms you rank for already.
* If you see a term like **docusaurus plugin config**, add a short section that directly answers that topic and includes the term naturally. Example:

```md
### Docusaurus plugin config example

Add the OpenAPI plugin inside the `plugins` array in `docusaurus.config.js`. Make sure the `id` is unique and `docsPluginId` matches the preset. Then run `npx docusaurus gen-api-docs <id>`.
```

* Refresh screenshots.
* Fix broken links.
* Update code to match new plugin versions.

## Promote your article

Do not wait for Google alone. Share on LinkedIn, X, Discord, and relevant repos. Pin it in your GitHub README if you have a related project. Early traffic helps.

## Common pitfalls to avoid

* Image path does not exist. Keep images in `static/img`. Reference with `/img/filename.png`.
* Navbar sidebarId does not exist. Make sure there is a matching id in `sidebars.js`.
* Moved generated API files by hand. If you move files, update `dirName` in the sidebar and fix links.
* Missing `docItemComponent: '@theme/ApiItem'` when using the OpenAPI theme. Add it to the classic preset docs config.

## Conclusion

To rank a **Docusaurus** post, you need solid keyword research, a clear outline, strong front matter, helpful examples, clean links, and good technical SEO. Use this checklist with the **Docusaurus OpenAPI plugin** example and you will produce content that serves users first and earns search visibility over time.

If you want a ready to use template, copy this file, change the front matter, swap the images, and adapt the examples to your API. Then publish, submit to Search Console, and start improving based on the data you see.

